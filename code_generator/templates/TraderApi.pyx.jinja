{% macro parameters(params) %}
    {% if params %}

    {% for p in params %}
    {% if p.pointer %}
        None if {{ p.name }} is NULL else {{ p.type_py_class_name }}.from_address(<size_t> {{ p.name }}).to_tuple()
    {%- else %}
        {{ p.name }}
    {%- endif %}
        {% if not loop.last -%}
        ,
        {% endif %}
    {% endfor %}

{{ '    ' -}}
    {% endif %}
{% endmacro %}
# -*- coding: utf-8 -*-
#
# Copyright 2019 Ricequant, Inc
#
# * Commercial Usage: please contact public@ricequant.com
# * Non-Commercial Usage:
#     Licensed under the Apache License, Version 2.0 (the "License");
#     you may not use this file except in compliance with the License.
#     You may obtain a copy of the License at
#
#         http://www.apache.org/licenses/LICENSE-2.0
#
#     Unless required by applicable law or agreed to in writing, software
#     distributed under the License is distributed on an "AS IS" BASIS,
#     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#     See the License for the specific language governing permissions and
#     limitations under the License.

from cpython cimport PyObject
from libc.string cimport const_char
from libcpp cimport bool as cbool

from .ThostFtdcTraderApi cimport CTraderApi, CTraderSpi, CreateFtdcTraderApi
from .ThostFtdcUserApiStruct cimport *

import ctypes

from .structs import *


cdef class TraderApi:
    cdef CTraderApi *_api
    cdef CTraderSpi *_spi

    def __cinit__(self):
        self._api = NULL
        self._spi = NULL

    def __init__(self, const_char *pszFlowPath):
        self._api = CreateFtdcTraderApi(pszFlowPath)
        if self._api is NULL:
            raise MemoryError()
        self._spi = new CTraderSpi(<PyObject *>self)
        if self._spi is NULL:
            raise MemoryError()
        self._api.RegisterSpi(self._spi)

    def __dealloc__(self):
        if self._api is not NULL:
            self._api.RegisterSpi(NULL)
            self._api.Release()
            self._api = NULL
            self._spi = NULL

    def _ensure_api_not_null(self):
        if self._api is NULL:
            raise MemoryError()

    def Release(self):
        if self._api is not NULL:
            self._api.RegisterSpi(NULL)
            self._api.Release()
            self._api = NULL
            self._spi = NULL

    def Init(self):
        self._ensure_api_not_null()
        self._api.Init()

    def Join(self):
        cdef int result
        self._ensure_api_not_null()
        if self._spi is not NULL:

            print("before api join")
            with nogil:
                result = self._api.Join()
            return result

    def RegisterFront(self, char *pszFrontAddress):
        self._ensure_api_not_null()
        self._api.RegisterFront(pszFrontAddress)

    def SubscribePrivateTopic(self, THOST_TE_RESUME_TYPE nResumeType):
        self._ensure_api_not_null()
        self._api.SubscribePrivateTopic(nResumeType)

    def SubscribePublicTopic(self, THOST_TE_RESUME_TYPE nResumeType):
        self._ensure_api_not_null()
        self._api.SubscribePublicTopic(nResumeType)
    {% for method in api_methods %}

    def {{ method.name }}(self, {{ method.first_param.name }}{%if method.req_id_in_params %}, int nRequestID{% endif %}):
        {% if method.return_type == "int" %}
        cdef int result
        {% endif %}
        cdef size_t address
        self._ensure_api_not_null()
        address = ctypes.addressof({{ method.first_param.name }})
        with nogil:
            {% if method.return_type == "int" %}
            result = self._api.{{ method.name }}(<{{ method.first_param.type }} *> address{% if method.req_id_in_params %}, nRequestID{% endif %})
            {% else %}
            self._api.{{ method.name }}(<{{ method.first_param.type }} *> address{% if method.req_id_in_params %}, nRequestID{% endif %})
            {% endif %}
        return{% if method.return_type == "int" %} result{% endif %}

    {% endfor %}
{% for method in spi_methods %}


cdef extern int TraderSpi__{{ method.name }}(api{% for p in method.params %}, {% if p.type == "bool" %}c{% endif %}{{ p.type }} {% if p.pointer %}*{% endif %}{{ p.name }}{% endfor %}) except -1:
    api.{{ method.name }}({{ parameters(method.params) }})
    return 0
{% endfor %}
